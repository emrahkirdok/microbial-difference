---
title: "TPL Veri Analizi"
author: "Nursena Kocatürk"
format: html
editor: visual
---

# Giriş

Bu dökümanda tpl veri analizi adımları dökümante edilecektir.

# Yöntemler

## Kütüphaneler

Çalışmamızda aşağıda belirtilen kütüphaneler kullanılmaktadır. Örneklerin sahip oldukları Bray-Curtis uzaklıkları `vegan` kütüphanesi ile hesaplanmaktadır. Elde edilen Bray-Curtis uzaklık matrisi, daha sonra `ecodist` kütüphanesi içerisinde bulunan `pcoa` komutu ile öz bileşenlerine ayrılmaktadır.

```{r}
library(vegan)
library(ggplot2)
library(ecodist)
```

## Veri yükleme

Çalışmalarda kullanılacak mutlak çokluk verisi aşağıdaki gibi yüklenmektedir:

```{r}
veri <- read.table(file = "data/krakenuniq_abundance_matrix.txt", header = T, sep = "\t")
```

Çalışma kapsamında toplam olarak `r ncol(veri)`kadar örnek ve`r nrow(veri)` kadar mikroorganizma bulunmaktadır:

```{r}
dim(veri)
```

Şimdi de, örneklerin sahip oldukları doku bilgilerini yükleyelim:

```{r}
metadata <- read.table(file = "data/metadata.csv", header = T, sep = ";")
```

Uyarı: Bu noktada veri sütunlar ile metadata içerisindeki örnek bilgisinin aynı sırada olması önemlidir.

Her dokuya ait kaç tane örnek var acaba?

```{r}
table(metadata$Tissue)
```

Dentin ve cementum farkını gösteren bir grafik oluşturalım.

```{r}
ggplot(data = data, aes(x = Tissue, y = Number.of.species)) + geom_boxplot()
```

## Veri normalizasyonu

Elimizdeki mikrobiyal çokluk matrisini öncelikle normalize etmemiz gereklidir. Çünkü her DNA kütüphanesi farklı okuma derinliğine (toplam okuma sayısı) sahiptir.

İlk olarak, bütun sutunların (yani her örneğin) toplam değerlerini elde edelim. Bu bize her örnekten elde edilen fastq dosyaının okuma derinliğini verecektir

```{r}
read_depth <- colSums(veri)
```

Şimdi de fastq dosyalarının sahip oldukları okuma derinliklerini görselleştirelim:

```{r fig.cap = "Read depth values of the tested fastq files (million reads)"}
barplot(read_depth/10^6, axisnames = FALSE, ylab = "Read Depth (million reads)", xlab="Fastq Files")
```

Derinlikler aynı değil. O yüzden, çokluk tablosunu, toplam okuma derinliğine göre normalize edersek, daha iyi bir karşılaştırma yapabiliriz.

```{r}
veri <- scale(veri,center = F, scale = colSums(veri))
```

## Birincil öz bileşen tahlili (PCA)

PCA, büyük boyutlu olan verileri küçük boyuta indirgemek için kullanılan yaklaşımlardan biridir. Bütün eksenler aynı anda görselleştirilemez. PCA, çok boyutlu veriyi alarak üç boyuta indirgemektedir. İlk üç eksen veri setinin sahip olduğu varyasyonun büyük bir kısmını içermektedir.

Verilen matris üzerinde PCA gerçekleştirir ve sonuçlar `prcomp` sınıfının nesnesi olarak döndürür.

Burada önemli olan nokta, veriyi transpoze etmemiz. Yani satırları sütün, sütunları ise satır yapıyoruz.

```{r}
pca_res <- prcomp(t(veri))
```

Prcomp sonuç nesnesinin özeti:

```{r}
summary(pca_res)
```

Sonuç nesnesindeki değişkenlerin adı:

-   sdev; temel bileşenlerin standart sapmaları
-   rotation; değişken yüklemelerin matrisi (yani sütunları özvektörleri içeren bir matris) x
-   retx doğruysa, döndürülen verilerin değeri veriler, döndürme matrisiyle döndürülür.
-   center, scale; kullanılan ortalama ve ölçeklendirme veya YANLIŞ.

```{r}
names(pca_res)
```

### Kümülatif varyasyon grafiği

Bu grafikte bütün mikropların sahip olduğu varyasyon 3 eksene indirgenmektedir. Elde edilen ilk 3 eksen bütün veri setine sahip olan varyasyonun büyük kısmını içermektedir. Ve eksenlerdeki varyasyon oranları, eklemeli olarak ilerlemektedir. Bu kümülatif varyasyondur.

Bu varyasyon değerini hesaplamak için şu adımları uygulayabiliriz:

**Standart sapma** `princomp` bileşeni; sdev

```{r}
pca_res$sdev
```

Varyans standart sapmanın karesidir.

```{r}
pca_res$sdev^2
```

Varyans oranı, varyansın tüm varyansların toplamına bölünmesiyle elde edilir.

```{r}
pca_res$sdev^2 / sum(pca_res$sdev^2)
```

Kümülatif oran, varyans oranının kümülatif toplamıdır.

```{r}
cumsum(pca_res$sdev^2 / sum(pca_res$sdev^2))
```

Kümülatif varyans grafiği;

```{r}
plot(cumsum(pca_res$sdev^2 / sum(pca_res$sdev^2)), type="b", xlab="PC", ylab="Cumulative Proportion")
```

## PCA analizini görselleştirme

Bu adımda ise PCA analizini görselleştirelim. Bizim için önemli olan ilk üç eksen. Dolayısıyla, öncelikle ilk üç eksendeki değerleri `pca_res` içerisinden alalım. Ayrıca, örneklerin doku bilgilerini de elde edelim. Bu sayede, grafikleki noktaları, örneklerin doku bilgilerine göre boyayabiliriz.

```{r}
PC_data <- data.frame(PC1=pca_res$x[,1],
                      PC2=pca_res$x[,2],
                      PC3=pca_res$x[,3],
                      Tissue=metadata$Tissue)
```

Şimdi de `ggplot2` ile görselleştirme yapalım. Önce PC1 ve PC2:

```{r}
ggplot(data = PC_data, aes(x=PC1, y=PC2, color=Tissue)) + geom_point()
```

Şimdi de PC1 ve PC3:

```{r}
ggplot(data = PC_data, aes(x=PC1, y=PC3, color=Tissue)) + geom_point()
```

Son olarak PC2 ve PC3:

```{r}
ggplot(data = PC_data, aes(x=PC2, y=PC3, color=Tissue)) + geom_point()
```

## Bray Curtis Analizi

Bray curtis analizi, iki farklı bölge arasındaki tür popülasyonlarındaki farklılıkları ölçmek için kullanılır. 

Aynı veya farklı dokudan gelen örnekler; aynı dokuysa benzer türlere, farklı dokuysa farklı türlere sahiptir. İki örnek fazla ortak türe sahipse bunlar benzerdir. Ve iki farklı örnek ne kadar fazla ortak tür taşıyorsa o kadar düşük bray curtis uzaklığına sahiptir. 

Bray curtis uzaklğı 0 ile 1 arasındadır. 

+ 0 ise iki örnek aynı türü taşıyordur.
+ 1, örnekler hiçbir tür paylaşmamaktadır. 

Bu adımda, örneklerin sahip oldukları mikrobiyal uzaklıkları hesaplayarak, elde edilen uzaklık matrisini görselleştirelim.

Önce Bray-Curtis ekolojik uzaklığını elde edelim:

```{r}
bray_curtis_dist <- vegdist(t(veri), method = "bray")
```

Sonra, `pco` ile bu uzaklık matrisinin öz bileşenlerine ayıralım:

```{r}
bray_curtis_pcoa <- pco(bray_curtis_dist)
```

Aynı şekilde, bizim için önemli olan eksenleri ve doku bilgisini alalım.

```{r}
bray_curtis_pcoa_df <- data.frame(PCOA1 = bray_curtis_pcoa$vectors[,1], 
                                  PCOA2 = bray_curtis_pcoa$vectors[,2],
                                  PCOA3 = bray_curtis_pcoa$vectors[,3],
                                  Tissue = metadata$Tissue)
```

Önce PC1 ve PC2 eksenlerini inceleyelim:

```{r}
ggplot(data = bray_curtis_pcoa_df, aes(x=PCOA1, y=PCOA2, color=Tissue)) +
  geom_point() +
  labs(title = "Bray-Curtis PCoA")
```

Sonra PC1 ve PC3 eksenlerini inceleyelim:

```{r}
ggplot(data = bray_curtis_pcoa_df, aes(x=PCOA1, y=PCOA3, color=Tissue)) +
  geom_point() +
  labs(title = "Bray-Curtis PCoA")
```

Önce PC2 ve PC3 eksenlerini inceleyelim:

```{r}
ggplot(data = bray_curtis_pcoa_df, aes(x=PCOA2, y=PCOA3, color=Tissue)) +
  geom_point() +
  labs(title = "Bray-Curtis PCoA")
```

## Alfa Çeşitliliği

Alfa çeşitliliği, tek bir örnekteki tür çeşitliliğini ölçer. 

### Alfa Çeşitliliği istatistikleri

+ Shannon, rastgele seçilmiş bir bireyin kimlik tahmini
+ Simpson, rastgele seçilen iki bireyin aynı tür olma olasılığı
+ Ters simpson, türlerin ortalama orantılı bolluğunu ölçmek için ağırlıklı aritmetik ortalama kullanıldığında elde edilen etkin tür sayısına eşittir. 

Simpson indeksi, 0 ile 1 arasındadır. Ters simpson indeksi, sıfırdan büyüktür. Ayrıca ters simpson indeksi, daha yüksek çeşitlilik değerlerini daha fazla yayma eğilimindedir.

Vegan, biyolojik çeşitlilik istatistiklerini hesaplamak için kullanılan bir araç setidir.

```{r}
library("vegan")
```







